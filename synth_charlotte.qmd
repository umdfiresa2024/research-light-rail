---
title: "Synthetic Control Analysis"
format: html
editor: visual
---

# Charlotte

## Annual averages

```{r}
#| echo: false
#| message: false
#| warnings: false
library("tidyverse")
library("Synth")
library("gsynth")
```

```{r}
construction<-as.Date("2005-03-01")
expansion<-as.Date("2012-12-01")
open<-as.Date("2007-11-01")
```

```{r}
#| echo: false
#| message: false
#| warnings: false

opentime<-7

df<-read.csv("daily roads/panel_updated.csv") 

df3 <- df |>
  filter(Address=="Winston-Salem, NC" | 
           Address=="Greenville, SC" | 
           Address=="Columbia, SC" | Address=="Asheville, NC" |
           Address=="Charleston, SC" | Address=="Durham, NC" |
           Address=="Fayetteville, NC" | 
           Address=="Greenville, SC" |
           Address=="Charlotte, NC") |>
  #create number representing each city
  mutate(add_num=factor(Address)) |>
  mutate(add_num=as.numeric(add_num)) |>
  #remove unwanted years
  mutate(date=as.Date(date)) |>
  filter(date<construction | date>open) |> 
  filter(date<expansion) |>
  #find monthly averages
  group_by(year, Address, add_num) |>
  summarize(pm25 = mean(pm25, na.rm = TRUE),
              Rainf_tavg = mean(Rainf_tavg, na.rm = TRUE),
              Swnet_tavg = mean(Swnet_tavg, na.rm = TRUE),
              Lwnet_tavg = mean(Lwnet_tavg, na.rm = TRUE),
              Qle_tavg = mean(Qle_tavg, na.rm = TRUE),
              Qh_tavg = mean(Qh_tavg, na.rm = TRUE),
              Qg_tavg = mean(Qg_tavg, na.rm = TRUE),
            Snowf_tavg = mean(Snowf_tavg, na.rm = TRUE),
  Evap_tavg = mean(Evap_tavg, na.rm = TRUE),
  Qs_tavg = mean(Qs_tavg, na.rm = TRUE),
  Qsb_tavg = mean(Qsb_tavg, na.rm = TRUE),
  Qsm_tavg = mean(Qsm_tavg, na.rm = TRUE),
  SnowT_tavg = mean(SnowT_tavg, na.rm = TRUE),
  AvgSurfT_tavg = mean(AvgSurfT_tavg, na.rm = TRUE),
  SWE_tavg = mean(SWE_tavg, na.rm = TRUE),
  SnowDepth_tavg = mean(SnowDepth_tavg, na.rm = TRUE),
  SoilMoist_S_tavg = mean(SoilMoist_S_tavg, na.rm = TRUE),
  SoilMoist_RZ_tavg = mean(SoilMoist_RZ_tavg, na.rm = TRUE),
  SoilMoist_P_tavg = mean(SoilMoist_P_tavg, na.rm = TRUE),
  ECanop_tavg = mean(ECanop_tavg, na.rm = TRUE),
  TVeg_tavg = mean(TVeg_tavg, na.rm = TRUE),
  ESoil_tavg = mean(ESoil_tavg, na.rm = TRUE),
  CanopInt_tavg = mean(CanopInt_tavg, na.rm = TRUE),
  EvapSnow_tavg = mean(EvapSnow_tavg, na.rm = TRUE),
  ACond_tavg = mean(ACond_tavg, na.rm = TRUE),
  TWS_tavg = mean(TWS_tavg, na.rm = TRUE),
  GWS_tavg = mean(GWS_tavg, na.rm = TRUE),
  Wind_f_tavg = mean(Wind_f_tavg, na.rm = TRUE),
  Tair_f_tavg = mean(Tair_f_tavg, na.rm = TRUE),
  Qair_f_tavg = mean(Qair_f_tavg, na.rm = TRUE),
  Psurf_f_tavg = mean(Psurf_f_tavg, na.rm = TRUE),
  SWdown_f_tavg = mean(SWdown_f_tavg, na.rm = TRUE)) |>
  mutate(time=year-2000) |>
  #make sure that time index is continuous 
  mutate(time=ifelse(time>opentime-1, time-1, time))

#opening time=62
```

```{r}
epa<-read.csv("epa_by_day.csv") |>
  mutate(date=as.Date(Date)) |>
  mutate(month=month(date), year=year(date)) |>
  rename(Address=Urbanized.Area) |>
  group_by(Address, year) |>
  summarise(CO2=sum(CO2), 
            SO2=sum(SO2), 
            NOx=sum(NOx)) 
```

```{r}
ntd<-read.csv("pop_ntd_year.csv") |>
  rename(Address=Urbanized.Area) |>
  group_by(Address, year) |>
  summarize(pop=mean(pop), bus=mean(bus), rail=mean(rail), cars=mean(cars), oth=mean(oth)) 

df4<-merge(df3, epa, by=c("year", "Address"))

df5<-left_join(df4, ntd, by=c("year", "Address")) |>
  filter(Address!="Columbia, SC")

temp<-df5 |>
  group_by(Address) |>
  summarise(varbus=var(bus), varCO2=var(CO2))

```

```{r}
#| echo: false
#| message: false
#| warnings: false
end<-max(df5$time)

df5<-as.data.frame(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(5:35, 37:40, 41, 43, 44)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}

png("Results/synth_nc_annualavg.png")
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Year"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
dev.off()
```

```{r}
gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## Monthly averages

```{r}
opentime<-62

df3 <- df |>
  filter(Address=="Winston-Salem, NC" | Address=="Greenville, SC" | 
           Address=="Columbia, SC" | Address=="Asheville, NC" |
           Address=="Charleston, SC" | Address=="Durham, NC" |
           Address=="Fayetteville, NC" | Address=="Greenville, SC" |
           Address=="Charlotte, NC") |>
  #create number representing each city
  mutate(add_num=factor(Address)) |>
  mutate(add_num=as.numeric(add_num)) |>
  #remove unwanted years
  mutate(date=as.Date(date)) |>
  filter(date<construction | date>open) |> 
  filter(date<expansion) |>
  #find monthly averages
  group_by(month, year, Address, add_num) |>
  summarize(pm25 = mean(pm25, na.rm = TRUE),
              Rainf_tavg = mean(Rainf_tavg, na.rm = TRUE),
              Swnet_tavg = mean(Swnet_tavg, na.rm = TRUE),
              Lwnet_tavg = mean(Lwnet_tavg, na.rm = TRUE),
              Qle_tavg = mean(Qle_tavg, na.rm = TRUE),
              Qh_tavg = mean(Qh_tavg, na.rm = TRUE),
              Qg_tavg = mean(Qg_tavg, na.rm = TRUE),
            Snowf_tavg = mean(Snowf_tavg, na.rm = TRUE),
  Evap_tavg = mean(Evap_tavg, na.rm = TRUE),
  Qs_tavg = mean(Qs_tavg, na.rm = TRUE),
  Qsb_tavg = mean(Qsb_tavg, na.rm = TRUE),
  Qsm_tavg = mean(Qsm_tavg, na.rm = TRUE),
  SnowT_tavg = mean(SnowT_tavg, na.rm = TRUE),
  AvgSurfT_tavg = mean(AvgSurfT_tavg, na.rm = TRUE),
  SWE_tavg = mean(SWE_tavg, na.rm = TRUE),
  SnowDepth_tavg = mean(SnowDepth_tavg, na.rm = TRUE),
  SoilMoist_S_tavg = mean(SoilMoist_S_tavg, na.rm = TRUE),
  SoilMoist_RZ_tavg = mean(SoilMoist_RZ_tavg, na.rm = TRUE),
  SoilMoist_P_tavg = mean(SoilMoist_P_tavg, na.rm = TRUE),
  ECanop_tavg = mean(ECanop_tavg, na.rm = TRUE),
  TVeg_tavg = mean(TVeg_tavg, na.rm = TRUE),
  ESoil_tavg = mean(ESoil_tavg, na.rm = TRUE),
  CanopInt_tavg = mean(CanopInt_tavg, na.rm = TRUE),
  EvapSnow_tavg = mean(EvapSnow_tavg, na.rm = TRUE),
  ACond_tavg = mean(ACond_tavg, na.rm = TRUE),
  TWS_tavg = mean(TWS_tavg, na.rm = TRUE),
  GWS_tavg = mean(GWS_tavg, na.rm = TRUE),
  Wind_f_tavg = mean(Wind_f_tavg, na.rm = TRUE),
  Tair_f_tavg = mean(Tair_f_tavg, na.rm = TRUE),
  Qair_f_tavg = mean(Qair_f_tavg, na.rm = TRUE),
  Psurf_f_tavg = mean(Psurf_f_tavg, na.rm = TRUE),
  SWdown_f_tavg = mean(SWdown_f_tavg, na.rm = TRUE)) |>
    mutate(date=as.Date(paste0(as.character(year), 
                             "-", as.character(month), 
                             "-01"))) |>
  mutate(time=interval(as.Date("2000-01-01"), date)/months(1)) |>
  arrange(time) |>
  mutate(time=ifelse(time>opentime-1, time-32, time))

epa<-read.csv("epa_by_day.csv") |>
  mutate(date=as.Date(Date)) |>
  mutate(month=month(date), year=year(date)) |>
  rename(Address=Urbanized.Area) |>
  group_by(month, Address, year) |>
  summarise(CO2=sum(CO2), 
            SO2=sum(SO2), 
            NOx=sum(NOx)) 

ntd<-read.csv("pop_ntd_year.csv") |>
  rename(Address=Urbanized.Area) |>
  group_by(Address, year) |>
  summarize(pop=mean(pop), bus=mean(bus), rail=mean(rail), 
            cars=mean(cars), oth=mean(oth)) 

df4<-merge(df3, epa, by=c("year", "month", "Address"))

df5<-left_join(df4, ntd, by=c("year", "Address")) |>
  filter(Address!="Columbia, SC")

```

```{r}
end<-max(df5$time)

df5<-as.data.frame(df5)

dataprep.out <-
  dataprep(
    df5,
    #predictors            = colnames(df5)[c(5:35, 37:41, 43:44)], #add linear, square, cubic weather
    predictors            = colnames(df5)[c(6:36, 39:43, 45:46)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
png("Results/synth_nc_monthlyavg.png")
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

dev.off()

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## Monthly averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df3 <- df |>
  filter(Address=="Winston-Salem, NC" | Address=="Greenville, SC" | 
           Address=="Columbia, SC" | Address=="Asheville, NC" |
           Address=="Charleston, SC" | Address=="Durham, NC" |
           Address=="Fayetteville, NC" | Address=="Greenville, SC" |
           Address=="Charlotte, NC") |>
  #create number representing each city
  mutate(add_num=factor(Address)) |>
  mutate(add_num=as.numeric(add_num)) |>
  #remove unwanted years
  mutate(date=as.Date(date)) |>
  filter(date<construction | date>open) |> 
  filter(date<expansion) |>
  #select thursdays 
  mutate(dow=weekdays(date)) |>
  filter(dow=="Thursday") 

epa<-read.csv("epa_by_day.csv") |>
  mutate(date=as.Date(Date)) |>
  rename(Address=Urbanized.Area) 

df_epa<-merge(df3, epa, by=c("Address", "date"))

opentime<-62

#find monthly averages
df4<-df_epa |>
  group_by(month, year, Address, add_num) |>
  summarize(pm25 = mean(pm25, na.rm = TRUE),
              Rainf_tavg = mean(Rainf_tavg, na.rm = TRUE),
              Swnet_tavg = mean(Swnet_tavg, na.rm = TRUE),
              Lwnet_tavg = mean(Lwnet_tavg, na.rm = TRUE),
              Qle_tavg = mean(Qle_tavg, na.rm = TRUE),
              Qh_tavg = mean(Qh_tavg, na.rm = TRUE),
              Qg_tavg = mean(Qg_tavg, na.rm = TRUE),
            Snowf_tavg = mean(Snowf_tavg, na.rm = TRUE),
  Evap_tavg = mean(Evap_tavg, na.rm = TRUE),
  Qs_tavg = mean(Qs_tavg, na.rm = TRUE),
  Qsb_tavg = mean(Qsb_tavg, na.rm = TRUE),
  Qsm_tavg = mean(Qsm_tavg, na.rm = TRUE),
  SnowT_tavg = mean(SnowT_tavg, na.rm = TRUE),
  AvgSurfT_tavg = mean(AvgSurfT_tavg, na.rm = TRUE),
  SWE_tavg = mean(SWE_tavg, na.rm = TRUE),
  SnowDepth_tavg = mean(SnowDepth_tavg, na.rm = TRUE),
  SoilMoist_S_tavg = mean(SoilMoist_S_tavg, na.rm = TRUE),
  SoilMoist_RZ_tavg = mean(SoilMoist_RZ_tavg, na.rm = TRUE),
  SoilMoist_P_tavg = mean(SoilMoist_P_tavg, na.rm = TRUE),
  ECanop_tavg = mean(ECanop_tavg, na.rm = TRUE),
  TVeg_tavg = mean(TVeg_tavg, na.rm = TRUE),
  ESoil_tavg = mean(ESoil_tavg, na.rm = TRUE),
  CanopInt_tavg = mean(CanopInt_tavg, na.rm = TRUE),
  EvapSnow_tavg = mean(EvapSnow_tavg, na.rm = TRUE),
  ACond_tavg = mean(ACond_tavg, na.rm = TRUE),
  TWS_tavg = mean(TWS_tavg, na.rm = TRUE),
  GWS_tavg = mean(GWS_tavg, na.rm = TRUE),
  Wind_f_tavg = mean(Wind_f_tavg, na.rm = TRUE),
  Tair_f_tavg = mean(Tair_f_tavg, na.rm = TRUE),
  Qair_f_tavg = mean(Qair_f_tavg, na.rm = TRUE),
  Psurf_f_tavg = mean(Psurf_f_tavg, na.rm = TRUE),
  SWdown_f_tavg = mean(SWdown_f_tavg, na.rm = TRUE),
  CO2=sum(CO2), 
  SO2=sum(SO2), 
  NOx=sum(NOx))  |>
  mutate(date=as.Date(paste0(as.character(year), 
                             "-", as.character(month), "-01"))) |>
  mutate(time=interval(as.Date("2000-01-01"), date)/months(1)) |>
  arrange(time) |>
  #make sure that time index is continuous 
  mutate(time=ifelse(time>opentime-1, time-32, time))
  #create time index
```

```{r}
df5<-merge(df4, ntd, by=c("Address", "year")) |>
  filter(Address!="Columbia, SC")
```

```{r}
#| echo: false
#| message: false
#| warnings: false
opentime<-62
end<-max(df5$time)

df5<-as.data.frame(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:39, 42:43, 45:46)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
png("Presentation/images/synth_nc_thursavg.png")
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
dev.off()
```

```{r}
gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## January averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false


df6<-df5 |>
  filter(month==1) |>
  mutate(time=interval(as.Date("2000-01-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-2, time)) 

opentime<-6
end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:39, 42:43, 45:46)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
png("Presentation/images/synth_nc_thurs_Janavg.png")
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
dev.off()

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## February averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==2) |>
  mutate(time=interval(as.Date("2000-02-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-2, time)) 

opentime<-6
end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:39, 42:43, 45:46)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
png("Presentation/images/synth_nc_thurs_Febavg.png")
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
dev.off()

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## March averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==3) |>
  mutate(time=interval(as.Date("2000-03-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) 

opentime<-5
end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:39, 42:43, 45:46)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## April averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==4) |>
  mutate(time=interval(as.Date("2000-04-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)

end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:34, 37:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## May averages for Thursdays

```{r}
df6<-df5 |>
  filter(month==5) |>
  mutate(time=interval(as.Date("2000-05-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)

end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:34, 37:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## June averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==6) |>
  mutate(time=interval(as.Date("2000-06-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)
names(df6)
end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:31, 34:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
png("Presentation/images/synth_nc_thurs_Julyavg.png", 
    res=500, width=5, height=5, units="in")
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("PM2.5"),
          Xlab         = c("Time"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

dev.off()
```

## July averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==7) |>
  mutate(time=interval(as.Date("2000-07-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)
names(df6)
end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:31, 34:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
```

## August averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==8) |>
  mutate(time=interval(as.Date("2000-08-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)

end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:34, 37:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
```

## September averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==9) |>
  mutate(time=interval(as.Date("2000-09-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)

end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:34, 37:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
```

## Oct averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==10) |>
  mutate(time=interval(as.Date("2000-10-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-3, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)

end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:39, 42:45)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
```

## Nov averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false

df6<-df5 |>
  filter(month==11) |>
  mutate(time=interval(as.Date("2000-11-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-2, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)

end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:39, 42:45)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
```

## December averages for Thursdays

```{r}
#| echo: false
#| message: false
#| warnings: false
df6<-df5 |>
  filter(month==12) |>
  mutate(time=interval(as.Date("2000-12-01"), date)/months(12)) |>
  mutate(time=ifelse(time>5, time-2, time)) |>
  select(where(~ any(. != 0)))

opentime<-5

table(df6$time)

end<-max(df6$time)

dataprep.out <-
  dataprep(
    df6,
    predictors            = colnames(df6)[c(6:39, 42:45)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 3 , #value in add_num column
    controls.identifier   = c(1, 5:8), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
```

# 
