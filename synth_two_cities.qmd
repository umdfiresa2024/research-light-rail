---
title: "Synthetic Controls Grouped DOW"
format: html
editor: visual
---

# Phoenix & Charlotte

```{r}
#| echo: false
#| message: false
#| warnings: false
library("tidyverse")
library("Synth")
library("gsynth")
```

```{r}
construction<-as.Date("2005-07-01") #Charlotte's Construction
expansion<-as.Date("2012-07-01") #Phoenix's Expansion
open<-as.Date("2008-12-01") #Phoenix's Opening
```

## Annual averages

```{r}

#| echo: false
#| message: false
#| warnings: false

opentime<-6

df<-read.csv("daily roads/panel_updated.csv") 

df3 <- df |>
  filter(Address!="Columbia, SC") |>
  filter(Address!="Concord, NC") |>
  filter(Address!="Flagstaff, AZ") |>
  filter(Address!="Odessa, TX") |>
  filter(Address!="Brownsville, TX") |>
  #create number representing each city
  mutate(add_num=factor(Address)) |>
  mutate(add_num=as.numeric(add_num)) |>
  #remove unwanted years
  mutate(date=as.Date(date)) |>
  filter(date<construction | date>open) |> 
  filter(date<expansion) |>
  #find monthly averages
  group_by(year, Address, add_num) |>
  summarize(pm25 = mean(pm25, na.rm = TRUE),
              Rainf_tavg = mean(Rainf_tavg, na.rm = TRUE),
              Swnet_tavg = mean(Swnet_tavg, na.rm = TRUE),
              Lwnet_tavg = mean(Lwnet_tavg, na.rm = TRUE),
              Qle_tavg = mean(Qle_tavg, na.rm = TRUE),
              Qh_tavg = mean(Qh_tavg, na.rm = TRUE),
              Qg_tavg = mean(Qg_tavg, na.rm = TRUE),
            Snowf_tavg = mean(Snowf_tavg, na.rm = TRUE),
  Evap_tavg = mean(Evap_tavg, na.rm = TRUE),
  Qs_tavg = mean(Qs_tavg, na.rm = TRUE),
  Qsb_tavg = mean(Qsb_tavg, na.rm = TRUE),
  Qsm_tavg = mean(Qsm_tavg, na.rm = TRUE),
  SnowT_tavg = mean(SnowT_tavg, na.rm = TRUE),
  AvgSurfT_tavg = mean(AvgSurfT_tavg, na.rm = TRUE),
  SWE_tavg = mean(SWE_tavg, na.rm = TRUE),
  SnowDepth_tavg = mean(SnowDepth_tavg, na.rm = TRUE),
  SoilMoist_S_tavg = mean(SoilMoist_S_tavg, na.rm = TRUE),
  SoilMoist_RZ_tavg = mean(SoilMoist_RZ_tavg, na.rm = TRUE),
  SoilMoist_P_tavg = mean(SoilMoist_P_tavg, na.rm = TRUE),
  ECanop_tavg = mean(ECanop_tavg, na.rm = TRUE),
  TVeg_tavg = mean(TVeg_tavg, na.rm = TRUE),
  ESoil_tavg = mean(ESoil_tavg, na.rm = TRUE),
  CanopInt_tavg = mean(CanopInt_tavg, na.rm = TRUE),
  EvapSnow_tavg = mean(EvapSnow_tavg, na.rm = TRUE),
  ACond_tavg = mean(ACond_tavg, na.rm = TRUE),
  TWS_tavg = mean(TWS_tavg, na.rm = TRUE),
  GWS_tavg = mean(GWS_tavg, na.rm = TRUE),
  Wind_f_tavg = mean(Wind_f_tavg, na.rm = TRUE),
  Tair_f_tavg = mean(Tair_f_tavg, na.rm = TRUE),
  Qair_f_tavg = mean(Qair_f_tavg, na.rm = TRUE),
  Psurf_f_tavg = mean(Psurf_f_tavg, na.rm = TRUE),
  SWdown_f_tavg = mean(SWdown_f_tavg, na.rm = TRUE)) |>
  mutate(time=year-2000) |>
  #make sure that time index is continuous 
  mutate(time=ifelse(time>opentime-1, time-2, time))

```

```{r}
epa<-read.csv("epa_by_day.csv") |>
  mutate(date=as.Date(Date)) |>
  mutate(month=month(date), year=year(date)) |>
  rename(Address=Urbanized.Area) |>
  group_by(Address, year) |>
  summarise(CO2=sum(CO2), 
            SO2=sum(SO2), 
            NOx=sum(NOx)) 


ntd<-read.csv("pop_ntd_year.csv") |>
  rename(Address=Urbanized.Area) |>
  group_by(Address, year) |>
  summarize(pop=mean(pop), bus=mean(bus), 
            rail=mean(rail), cars=mean(cars), oth=mean(oth)) 

df4<-merge(df3, epa, by=c("year", "Address"))

df5<-left_join(df4, ntd, by=c("year", "Address")) |>
  select(-rail, -Qsb_tavg) |>
  select(where(~ any(. != 0)))

temp<-df5 |>
  group_by(Address) |>
  summarise(varbus=var(bus), varCO2=var(CO2))

table(df5$time)
```

```{r}
#| echo: false
#| message: false
#| warnings: false
end<-max(df5$time)

df5<-as.data.frame(df5) |>
  mutate(D=ifelse(time>=6 & Address=="Charlotte, NC", 1, 0)) |>
  mutate(D=ifelse(time>=6 & Address=="Phoenix-Mesa, AZ", 1, D)) |>
  filter(Address!="Flagstaff, AZ") |>
  filter(Address!="Columbia, SC") |>
  rename(Y=pm25)

names(df5)

#library("devtools")
#devtools::install_github('xuyiqing/panelView') 
library(panelView)

panelview(Y ~ D, data = df5,  index = c("add_num","time"), pre.post = TRUE) 
panelview(Y ~ D, data = df5,  index = c("add_num","time"), type = "outcome") 

out <- gsynth(Y ~ D + Rainf_tavg  +    Swnet_tavg  + Wind_f_tavg  +   Tair_f_tavg  +   Qair_f_tavg +   
                CO2    + SO2    + NOx    + pop    + bus    + cars   +     oth, 
              data = df5, 
                  index = c("add_num","time"), force = "two-way", 
                  se = TRUE, r=c(0,4), 
                  inference = "parametric", nboots = 1000, 
                  parallel = FALSE, min.T0 = 5)

# out <- gsynth(Y ~ D + Rainf_tavg  +    Swnet_tavg  +    Lwnet_tavg  +  
#                 Qle_tavg + Qh_tavg + Qg_tavg + Snowf_tavg + Evap_tavg + Qs_tavg + Qsm_tavg  +  
#                 SnowT_tavg  +    AvgSurfT_tavg  + SWE_tavg   + SnowDepth_tavg + 
#                 SoilMoist_S_tavg + SoilMoist_RZ_tavg + SoilMoist_P_tavg +
#                 ECanop_tavg + TVeg_tavg + ESoil_tavg + CanopInt_tavg  + 
#                 EvapSnow_tavg  + ACond_tavg  +    TWS_tavg  +    
#                 GWS_tavg   + Wind_f_tavg  +   Tair_f_tavg  +   Qair_f_tavg  +   
#                 Psurf_f_tavg  +  SWdown_f_tavg + CO2    + SO2    + NOx + pop + bus + cars + oth, 
#               data = df5, 
#                   index = c("add_num","time"), force = "two-way", 
#                   se = TRUE, r=c(0,4), r.cv=4,
#                   inference = "parametric", nboots = 1000, 
#                   parallel = FALSE, min.T0 = 5)


print(out)
plot(out, type="raw")
plot(out, type="counterfactual")

```

## Monthly averages

```{r}
opentime<-66

df3 <- df |>
filter(Address=="Flagstaff, AZ" | Address=="Phoenix-Mesa, AZ" | 
           Address=="Tucson, AZ" | Address=="El Paso, TX-NM" | 
           Address=="Las Cruces, NM") |>
  #create number representing each city
  mutate(add_num=factor(Address)) |>
  mutate(add_num=as.numeric(add_num)) |>
  #remove unwanted years
  mutate(date=as.Date(date)) |>
  filter(date<construction | date>open) |> 
  filter(date<expansion) |>
  #find monthly averages
  group_by(month, year, Address, add_num) |>
  summarize(pm25 = mean(pm25, na.rm = TRUE),
              Rainf_tavg = mean(Rainf_tavg, na.rm = TRUE),
              Swnet_tavg = mean(Swnet_tavg, na.rm = TRUE),
              Lwnet_tavg = mean(Lwnet_tavg, na.rm = TRUE),
              Qle_tavg = mean(Qle_tavg, na.rm = TRUE),
              Qh_tavg = mean(Qh_tavg, na.rm = TRUE),
              Qg_tavg = mean(Qg_tavg, na.rm = TRUE),
            Snowf_tavg = mean(Snowf_tavg, na.rm = TRUE),
  Evap_tavg = mean(Evap_tavg, na.rm = TRUE),
  Qs_tavg = mean(Qs_tavg, na.rm = TRUE),
  Qsb_tavg = mean(Qsb_tavg, na.rm = TRUE),
  Qsm_tavg = mean(Qsm_tavg, na.rm = TRUE),
  SnowT_tavg = mean(SnowT_tavg, na.rm = TRUE),
  AvgSurfT_tavg = mean(AvgSurfT_tavg, na.rm = TRUE),
  SWE_tavg = mean(SWE_tavg, na.rm = TRUE),
  SnowDepth_tavg = mean(SnowDepth_tavg, na.rm = TRUE),
  SoilMoist_S_tavg = mean(SoilMoist_S_tavg, na.rm = TRUE),
  SoilMoist_RZ_tavg = mean(SoilMoist_RZ_tavg, na.rm = TRUE),
  SoilMoist_P_tavg = mean(SoilMoist_P_tavg, na.rm = TRUE),
  ECanop_tavg = mean(ECanop_tavg, na.rm = TRUE),
  TVeg_tavg = mean(TVeg_tavg, na.rm = TRUE),
  ESoil_tavg = mean(ESoil_tavg, na.rm = TRUE),
  CanopInt_tavg = mean(CanopInt_tavg, na.rm = TRUE),
  EvapSnow_tavg = mean(EvapSnow_tavg, na.rm = TRUE),
  ACond_tavg = mean(ACond_tavg, na.rm = TRUE),
  TWS_tavg = mean(TWS_tavg, na.rm = TRUE),
  GWS_tavg = mean(GWS_tavg, na.rm = TRUE),
  Wind_f_tavg = mean(Wind_f_tavg, na.rm = TRUE),
  Tair_f_tavg = mean(Tair_f_tavg, na.rm = TRUE),
  Qair_f_tavg = mean(Qair_f_tavg, na.rm = TRUE),
  Psurf_f_tavg = mean(Psurf_f_tavg, na.rm = TRUE),
  SWdown_f_tavg = mean(SWdown_f_tavg, na.rm = TRUE)) |>
    mutate(date=as.Date(paste0(as.character(year), 
                             "-", as.character(month), 
                             "-01"))) |>
  mutate(time=interval(as.Date("2000-01-01"), date)/months(1)) |>
  arrange(time) |>
  mutate(time=ifelse(time>opentime-1, time-41, time))  |>
  select(where(~ any(. != 0)))

table(df3$time)

epa<-read.csv("epa_by_day.csv") |>
  mutate(date=as.Date(Date)) |>
  mutate(month=month(date), year=year(date)) |>
  rename(Address=Urbanized.Area) |>
  group_by(month, Address, year) |>
  summarise(CO2=sum(CO2), 
            SO2=sum(SO2), 
            NOx=sum(NOx)) 

df4<-merge(df3, epa, by=c("year", "month", "Address"))

#df5<-left_join(df4, ntd, by=c("year", "Address")) 
```

```{r}
end<-max(df5$time)

names(df5)

dataprep.out <-
  dataprep(
    df5,   
    predictors            = colnames(df5)[c(6:35, 38:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1, 2, 3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
png("Presentation/images/synth_az_monthlyavg.png",
    res=500, width=5, height=5, units="in")

path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("PM2.5"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

dev.off()

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)
```

## January averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==1) |>
  mutate(time=interval(as.Date("2000-01-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-3, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:35, 38:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## February averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==2) |>
  mutate(time=interval(as.Date("2000-02-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-3, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:35, 38:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## March averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==3) |>
  mutate(time=interval(as.Date("2000-03-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-3, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:35, 38:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## April averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==4) |>
  mutate(time=interval(as.Date("2000-04-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-3, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:35, 38:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## February averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==5) |>
  mutate(time=interval(as.Date("2000-05-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-3, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:35, 38:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## June averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==6) |>
  mutate(time=interval(as.Date("2000-06-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-3, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:30, 33:35)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}

png("Presentation/images/synth_az_Juneavg.png", 
    res=500, width=5, height=5, units="in")

path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("PM2.5"),
          Xlab         = c("Time"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft"))
          
abline(v   = opentime,
       lty = 2)          
          

dev.off()



gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## July averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==7) |>
  mutate(time=interval(as.Date("2000-07-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-4, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:30, 33:35)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```

## August averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==8) |>
  mutate(time=interval(as.Date("2000-08-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-4, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:30, 33:35)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```


## July averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==8) |>
  mutate(time=interval(as.Date("2000-08-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-4, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:30, 33:35)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```
## Sep averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==9) |>
  mutate(time=interval(as.Date("2000-09-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-4, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:30, 33:35)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```
## Oct averages 

```{r}
opentime<-6

df5<-df4 |>
  filter(month==11) |>
  mutate(time=interval(as.Date("2000-11-01"), date)/months(12)) |>
  mutate(time=ifelse(time>opentime, time-4, time))|>
  select(where(~ any(. != 0)))

end<-max(df5$time)

table(df5$time)
names(df5)

dataprep.out <-
  dataprep(
    df5,
    predictors            = colnames(df5)[c(6:35, 38:40)], #add linear, square, cubic weather
    dependent             = "pm25",
    unit.variable         = "add_num",
    time.variable         = "time",
    unit.names.variable   = "Address",
    treatment.identifier  = 4 , #value in add_num column
    controls.identifier   = c(1:3, 5), #value of other control cities
    time.predictors.prior = c(1:opentime-1),
    time.optimize.ssr     = c(1:opentime-1),
    time.plot             = c(1:end)
  )

synth.out <- synth(dataprep.out)

synth.tables   <- synth.tab(
  dataprep.res = dataprep.out,
  synth.res    = synth.out)
```

```{r}
path.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Y"),
          Xlab         = c("Months"),
          Legend       = c("Treated City","Synthetic City"),
          Legend.position = c("topleft")
)

abline(v   = opentime,
       lty = 2)

gaps.plot(synth.res    = synth.out,
          dataprep.res = dataprep.out,
          Ylab         = c("Gap"),
          Xlab         = c("Year"),
          Ylim         = c(-5, 5),
          Main         = ""
)

abline(v   = opentime,
       lty = 2)
```